/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./TypeScript/addemployee.ts":
/*!***********************************!*\
  !*** ./TypeScript/addemployee.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.addemployeeclass = void 0;\nconst index_1 = __webpack_require__(/*! ./index */ \"./TypeScript/index.ts\");\nclass addemployeeclass {\n    constructor() {\n        this.indexobj = new index_1.indexclass();\n    }\n    getFieldValue(fieldId) {\n        return document.getElementById(fieldId).value;\n    }\n    addEmployee() {\n        const fields = ['empid', 'firstname', 'lastname', 'dob', 'email', 'mobile', 'joiningdate', 'location', 'department'];\n        let isValid = true;\n        let employee = {};\n        fields.forEach((fieldId) => {\n            const field = document.getElementById(fieldId);\n            const errorSpan = document.getElementById(`${fieldId}-span`);\n            if (field.value.trim() === '') {\n                field.classList.add('err');\n                errorSpan.innerHTML = `<img src='assets/exclamation-mark-diamond.svg' alt='error' style='height:15px' > This ${fieldId} field is required`;\n                isValid = false;\n            }\n            else if (!field.checkValidity()) {\n                field.classList.add('err');\n                errorSpan.innerHTML = `<img src='assets/exclamation-mark-diamond.svg' alt='error' style='height:15px' > Please enter the valid data`;\n                isValid = false;\n            }\n            else {\n                field.classList.remove('err');\n                errorSpan.innerText = '';\n            }\n        });\n        var data = JSON.parse(localStorage.getItem(\"data\") || '{}');\n        var employees = data ? data.Employees : null;\n        if (data && employees) {\n            var exists = false;\n            var empid = this.getFieldValue('empid');\n            var AddOrEditFlag = this.getFieldValue('add-or-edit-employee-flag');\n            employees.forEach((employee) => {\n                if (employee.empid === empid && AddOrEditFlag === \"add\") {\n                    this.indexobj.CustomAlert('error', 'Employee ID already exists');\n                    exists = true;\n                    return false;\n                }\n            });\n            if (AddOrEditFlag === \"add\" && isValid && !exists) {\n                employee = {\n                    \"empid\": this.getFieldValue('empid'),\n                    \"firstname\": this.getFieldValue('firstname'),\n                    \"lastname\": this.getFieldValue('lastname'),\n                    \"DOB\": this.getFieldValue('dob'),\n                    \"emailid\": this.getFieldValue('email'),\n                    \"mobile\": this.getFieldValue('mobile'),\n                    \"location\": this.getFieldValue('location'),\n                    \"Department\": this.getFieldValue('department'),\n                    \"jobtitle\": this.getFieldValue('jobtitle'),\n                    \"profilepath\": document.getElementById('uploaded-img-preview').src,\n                    \"joining\": this.getFieldValue('joiningdate'),\n                    \"AssignManager\": this.getFieldValue('assignmanager'),\n                    \"AssignProject\": this.getFieldValue('assignproject'),\n                    \"status\": \"Active\"\n                };\n                let localdata = JSON.parse(localStorage.getItem(\"data\") || '{}');\n                localdata.Employees.push(employee);\n                localStorage.setItem(\"data\", JSON.stringify(localdata));\n                this.indexobj.EmployeeMenu();\n                this.indexobj.CustomAlert('success', 'Employee added successfully');\n            }\n            else if (AddOrEditFlag === \"edit\" && isValid) {\n                let employee = employees.find((emp) => emp.empid === empid);\n                Object.assign(employee, {\n                    \"empid\": this.getFieldValue('empid'),\n                    \"firstname\": this.getFieldValue('firstname'),\n                    \"lastname\": this.getFieldValue('lastname'),\n                    \"DOB\": this.getFieldValue('dob'),\n                    \"emailid\": this.getFieldValue('email'),\n                    \"mobile\": this.getFieldValue('mobile'),\n                    \"location\": this.getFieldValue('location'),\n                    \"Department\": this.getFieldValue('department'),\n                    \"jobtitle\": this.getFieldValue('jobtitle'),\n                    \"profilepath\": document.getElementById('uploaded-img-preview').src,\n                    \"joining\": this.getFieldValue('joiningdate'),\n                    \"AssignManager\": this.getFieldValue('assignmanager'),\n                    \"AssignProject\": this.getFieldValue('assignproject'),\n                    \"status\": \"Active\"\n                });\n                localStorage.setItem(\"data\", JSON.stringify(data));\n                this.indexobj.EmployeeMenu();\n                this.indexobj.CustomAlert('success', 'Employee updated successfully');\n            }\n        }\n        else {\n            console.error('Data or Employees is null');\n        }\n    }\n    addEmployeeEventListeners() {\n        const fields = ['empid', 'firstname', 'lastname', 'dob', 'email', 'mobile', 'joiningdate', 'location', 'department'];\n        const fieldsinfo = {\n            'empid': 'Invalid Format, Only TZ123456 allowed',\n            'firstname': 'Invalid Format, Only alphabets allowed',\n            'lastname': 'Invalid Format, Only alphabets allowed',\n            'dob': 'Invalid Format, Only DD/MM/YYYY allowed',\n            'email': 'Invalid Format, Only joe.a@technovert.com allowed',\n            'mobile': 'Invalid Format, Only digits allowed',\n            'joiningdate': 'Invalid Format, Only DD/MM/YYYY allowed',\n            'location': 'Invalid Format, Only alphabets allowed',\n            'department': 'Invalid Format, Only alphabets allowed'\n        };\n        fields.forEach((fieldId) => {\n            const field = document.getElementById(fieldId);\n            const errorSpan = document.getElementById(`${fieldId}-span`);\n            field.addEventListener('input', () => {\n                if (field.value.trim() === '') {\n                    field.classList.add('err');\n                    errorSpan.innerHTML = `<img src='assets/exclamation-mark-diamond.svg' alt='error' style='height:15px' > This ${fieldId} field is required`;\n                }\n                else if (!field.checkValidity()) {\n                    field.classList.add('err');\n                    errorSpan.innerHTML = `<img src='assets/exclamation-mark-diamond.svg' alt='error' style='height:15px' > ${fieldsinfo[fieldId]}`;\n                }\n                else {\n                    field.classList.remove('err');\n                    errorSpan.innerText = '';\n                }\n            });\n        });\n        //add data of birth validation eventlistner\n        const dobElement = document.getElementById('dob');\n        if (dobElement) {\n            dobElement.addEventListener('input', () => {\n                // check if the  date is valid and has 18+ years for the present date\n                var dobInput = dobElement.value;\n                var dob = dobInput.split('/').reverse().join('-');\n                var dobDate = new Date(dob);\n                var today = new Date();\n                var age = today.getFullYear() - dobDate.getFullYear();\n                var m = today.getMonth() - dobDate.getMonth();\n                if (m < 0 || (m === 0 && today.getDate() < dobDate.getDate())) {\n                    age--;\n                }\n                if (isNaN(age)) {\n                    dobElement.classList.add('err');\n                    document.getElementById('dob-span').innerHTML = \"<img src='assets/exclamation-mark-diamond.svg' alt='error' style='height:15px' > \" + \"Invalid Date , Only DD/MM/YYYY allowed\";\n                }\n                else if (age < 18) {\n                    dobElement.classList.add('err');\n                    document.getElementById('dob-span').innerHTML = \"<img src='assets/exclamation-mark-diamond.svg' alt='error' style='height:15px' > \" + \"You must be 18 years or older to register\";\n                }\n                else {\n                    dobElement.classList.remove('err');\n                    document.getElementById('dob-span').innerText = '';\n                }\n                dobElement.value = dobInput.replace(/^(\\d\\d)(\\d)$/g, '$1/$2').replace(/^(\\d\\d\\/\\d\\d)(\\d+)$/g, '$1/$2').replace(/[^\\d\\/]/g, '');\n            });\n        }\n    }\n    addemployeeFormSubmitValidation() {\n        const form = document.getElementById('add-employee-form');\n        form.addEventListener('submit', event => {\n            event.preventDefault();\n            this.addEmployeeEventListeners();\n        });\n        form.addEventListener(\"keypress\", event => {\n            if (event.key === \"Enter\") {\n                event.preventDefault();\n            }\n        });\n    }\n}\nexports.addemployeeclass = addemployeeclass;\n\n\n//# sourceURL=webpack://bundling-ts-files/./TypeScript/addemployee.ts?");

/***/ }),

/***/ "./TypeScript/data.ts":
/*!****************************!*\
  !*** ./TypeScript/data.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.dataclass = void 0;\nconst index_1 = __webpack_require__(/*! ./index */ \"./TypeScript/index.ts\");\nclass dataclass {\n    constructor() {\n        this.emp_filter_sort_data = [];\n        this.indexobj = new index_1.indexclass();\n    }\n    loadEmployeeData() {\n        fetch(\"data.json\")\n            .then((response) => response.json())\n            .then((data) => {\n            if (localStorage.getItem(\"data\") === null) {\n                localStorage.setItem(\"data\", JSON.stringify(data));\n            }\n            let localdata = JSON.parse(localStorage.getItem(\"data\") || \"{}\");\n            let employees = localdata.Employees;\n            this.emp_filter_sort_data = employees;\n            this.LoadEmployeeDataByArray(employees);\n        })\n            .catch((error) => console.error('Error:', error));\n    }\n    LoadEmployeeDataByArray(employeeArray) {\n        // get table by id and clear table body\n        let table = document.getElementById(\"employees-table\");\n        // only delete if table has rows\n        if (table.rows.length > 0) {\n            // only delete the tbody\n            while (table.rows.length > 1) {\n                table.deleteRow(-1);\n            }\n        }\n        let employees = employeeArray;\n        employees.forEach((employee) => {\n            let row = document.createElement('tr');\n            row.className = \"border-bottom\";\n            let cellCheckbox = document.createElement('td');\n            let checkbox = document.createElement('input');\n            checkbox.type = \"checkbox\";\n            checkbox.id = employee.empid;\n            cellCheckbox.appendChild(checkbox);\n            row.appendChild(cellCheckbox);\n            let cellProfile = document.createElement('td');\n            let divProfileContainer = document.createElement('div');\n            divProfileContainer.className = \"profile-container\";\n            let imgProfile = document.createElement('img');\n            imgProfile.src = employee.profilepath;\n            imgProfile.alt = \"Profile Image\";\n            imgProfile.className = \"profile-image\";\n            divProfileContainer.appendChild(imgProfile);\n            let divProfileInfo = document.createElement('div');\n            divProfileInfo.className = \"profile-info\";\n            let spanProfileName = document.createElement('span');\n            spanProfileName.className = \"profile-name\";\n            spanProfileName.textContent = employee.firstname + employee.lastname;\n            divProfileInfo.appendChild(spanProfileName);\n            let spanProfileEmail = document.createElement('span');\n            spanProfileEmail.className = \"profile-email\";\n            spanProfileEmail.textContent = employee.emailid;\n            divProfileInfo.appendChild(spanProfileEmail);\n            divProfileContainer.appendChild(divProfileInfo);\n            cellProfile.appendChild(divProfileContainer);\n            row.appendChild(cellProfile);\n            let cellCity = document.createElement('td');\n            cellCity.textContent = employee.location;\n            row.appendChild(cellCity);\n            let cellDepartment = document.createElement('td');\n            cellDepartment.textContent = employee.Department;\n            row.appendChild(cellDepartment);\n            let cellRole = document.createElement('td');\n            cellRole.textContent = employee.jobtitle;\n            row.appendChild(cellRole);\n            let cellId = document.createElement('td');\n            cellId.textContent = employee.empid;\n            row.appendChild(cellId);\n            let cellStatus = document.createElement('td');\n            let spanStatus = document.createElement('span');\n            spanStatus.className = employee.status === 'Active' ? 'table-status-active' : 'table-status-inactive';\n            spanStatus.textContent = employee.status;\n            cellStatus.appendChild(spanStatus);\n            row.appendChild(cellStatus);\n            let cellDate = document.createElement('td');\n            cellDate.textContent = employee.joining;\n            row.appendChild(cellDate);\n            let cellMore = document.createElement('td');\n            let buttonmore = document.createElement('button');\n            buttonmore.className = \"button-more\";\n            buttonmore.id = employee.empid + \"_more\";\n            buttonmore.textContent = \"...\";\n            let empid = employee.empid + \"_more\";\n            buttonmore.setAttribute(\"onclick\", \"viewmore('\" + empid + \"')\");\n            cellMore.appendChild(buttonmore);\n            let divMore = document.createElement('div');\n            divMore.className = \"emp-table-more\";\n            divMore.id = employee.empid + \"_more\" + \"_div\";\n            let aViewDetails = document.createElement('button');\n            aViewDetails.className = \"button-view-details\";\n            aViewDetails.textContent = \"View Details\";\n            let aEdit = document.createElement('button');\n            aEdit.className = \"button-edit\";\n            aEdit.id = employee.empid;\n            aEdit.setAttribute(\"onclick\", \"EditEmployeeDetails('\" + employee.empid + \"')\");\n            aEdit.textContent = \"Edit\";\n            let aDelete = document.createElement('button');\n            aDelete.className = \"button-delete\";\n            aDelete.id = employee.empid;\n            aDelete.setAttribute(\"onclick\", \"deleteEmployee('\" + employee.empid + \"')\");\n            aDelete.textContent = \"Delete\";\n            divMore.appendChild(aViewDetails);\n            divMore.appendChild(aEdit);\n            divMore.appendChild(aDelete);\n            // hide this divmore initially and when user click on cellmore.textcontent, show and toggle the cellmore\n            divMore.style.display = \"none\";\n            cellMore.appendChild(divMore);\n            row.appendChild(cellMore);\n            var t = document.getElementById(\"employees-table\");\n            var r = document.createElement(\"tr\");\n            r.innerHTML = row.innerHTML;\n            t.tBodies[0].appendChild(r);\n        });\n    }\n    export_options() {\n        var exportOptions = document.querySelector(\".export-options\");\n        if (exportOptions.style.display === \"none\") {\n            exportOptions.style.display = \"flex\";\n        }\n        else {\n            exportOptions.style.display = \"none\";\n        }\n    }\n    download_table_as_csv(table_id, separator = ',') {\n        try {\n            // Select rows from table_id\n            var rows = document.querySelectorAll('table#' + table_id + ' tr');\n            // Construct csv\n            var csv = [];\n            for (var i = 0; i < rows.length; i++) {\n                // Skip if the row's display is none\n                if (rows[i].style.display === 'none') {\n                    continue;\n                }\n                var row = [], cols = rows[i].querySelectorAll('td, th');\n                for (var j = 0; j < cols.length; j++) {\n                    // Clean innertext to remove multiple spaces and jumpline (break csv)\n                    var data = cols[j].innerText.replace(/(\\r\\n|\\n|\\r)/gm, '').replace(/(\\s\\s)/gm, ' ');\n                    // Escape double-quote with double-double-quote\n                    data = data.replace(/\"/g, '\"\"');\n                    // Push escaped string\n                    row.push('\"' + data + '\"');\n                }\n                csv.push(row.join(separator));\n            }\n            var csv_string = csv.join('\\n');\n            // Download it\n            var filename = 'export_' + table_id + '_' + new Date().toLocaleDateString() + '.csv';\n            var link = document.createElement('a');\n            link.style.display = 'none';\n            link.setAttribute('target', '_blank');\n            link.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv_string));\n            link.setAttribute('download', filename);\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n            this.indexobj.CustomAlert('success', filename + '\\n has begin downloading');\n        }\n        catch (error) {\n            this.indexobj.CustomAlert('error', error.message);\n        }\n    }\n    // download_table_as_xlsx(table_id: string): void {\n    //     try {\n    //         // Select rows from table_id\n    //         const rows: NodeListOf<HTMLTableRowElement> = document.querySelectorAll('table#' + table_id + ' tr');\n    //         // Construct data\n    //         let data: any[][] = [];\n    //         for (let i = 0; i < rows.length; i++) {\n    //             // Skip if the row's display is none\n    //             if (rows[i].style.display === 'none') {\n    //                 continue;\n    //             }\n    //             let row: any[] = [], cols: NodeListOf<HTMLTableCellElement> = rows[i].querySelectorAll('td, th');\n    //             for (let j = 0; j < cols.length; j++) {\n    //                 // Clean innertext to remove multiple spaces and jumpline\n    //                 let cellData: string = cols[j].innerText.replace(/(\\r\\n|\\n|\\r)/gm, '').replace(/(\\s\\s)/gm, ' ')\n    //                 row.push(cellData);\n    //             }\n    //             data.push(row);\n    //         }\n    //         // Create a new instance of a Workbook class\n    //         let wb: XLSX.WorkBook = XLSX.utils.book_new();\n    //         // Use XLSX.utils.aoa_to_sheet to convert our data to a worksheet object\n    //         let ws: XLSX.WorkSheet = XLSX.utils.aoa_to_sheet(data);\n    //         // Append the worksheet to the workbook\n    //         XLSX.utils.book_append_sheet(wb, ws, \"Sheet1\");\n    //         // Generate XLSX file and send to client\n    //         let wbout: string = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });\n    //         let buf: ArrayBuffer = new ArrayBuffer(wbout.length);\n    //         let view: Uint8Array = new Uint8Array(buf);\n    //         for (let i = 0; i < wbout.length; i++) view[i] = wbout.charCodeAt(i) & 0xFF;\n    //         let blob: Blob = new Blob([buf], { type: 'application/octet-stream' });\n    //         // Download it\n    //         let filename: string = 'export_' + table_id + '_' + new Date().toLocaleDateString() + '.xlsx';\n    //         let link: HTMLAnchorElement = document.createElement('a');\n    //         link.style.display = 'none';\n    //         link.setAttribute('target', '_blank');\n    //         link.href = URL.createObjectURL(blob);\n    //         link.setAttribute('download', filename);\n    //         document.body.appendChild(link);\n    //         link.click();\n    //         document.body.removeChild(link);\n    //         this.indexobj.CustomAlert('success', filename + '\\nhas begin downloading');\n    //     } catch (error) {\n    //         this.indexobj.CustomAlert('error', (error as Error).message);\n    //     }\n    // }\n    // the below functions used for search the employee based on the search input in the add role page\n    searchEmployees(query) {\n        let localdata = JSON.parse(localStorage.getItem(\"data\") || \"{}\");\n        let employees = localdata.Employees;\n        var results = employees.filter((employee) => {\n            if (employee.firstname) {\n                var emp = employee.firstname.toLowerCase() + employee.lastname.toLowerCase();\n                return emp.includes(query.toLowerCase());\n            }\n            return false;\n        });\n        var resultsDiv = document.getElementById('employee-results');\n        resultsDiv.innerHTML = '';\n        resultsDiv.style.display = results.length ? 'block' : 'none';\n        results.forEach((employee) => {\n            let employeeDiv = document.createElement('div');\n            employeeDiv.className = 'employee';\n            let checkbox = document.createElement('input');\n            //add classname \n            // checkbox.className = 'employee-checkbox';\n            checkbox.type = 'checkbox';\n            checkbox.value = employee.empid;\n            checkbox.onchange = () => {\n                this.updateSelectedEmployees();\n            };\n            let img = document.createElement('img');\n            img.src = employee.profilepath;\n            let name = document.createTextNode(employee.firstname + \" \" + employee.lastname);\n            employeeDiv.appendChild(checkbox);\n            employeeDiv.appendChild(img);\n            employeeDiv.appendChild(name);\n            resultsDiv.appendChild(employeeDiv);\n        });\n    }\n    updateSelectedEmployees() {\n        var checkboxes = document.querySelectorAll('#employee-results input[type=\"checkbox\"]');\n        var selectedEmployees = [];\n        checkboxes.forEach((checkbox) => {\n            if (checkbox.checked) {\n                selectedEmployees.push(checkbox.value);\n            }\n        });\n        document.getElementById('selected-employees').value = selectedEmployees.join(',');\n    }\n}\nexports.dataclass = dataclass;\n\n\n//# sourceURL=webpack://bundling-ts-files/./TypeScript/data.ts?");

/***/ }),

/***/ "./TypeScript/employee.ts":
/*!********************************!*\
  !*** ./TypeScript/employee.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.employeeclass = void 0;\nconst data_1 = __webpack_require__(/*! ./data */ \"./TypeScript/data.ts\");\nconst addemployee_1 = __webpack_require__(/*! ./addemployee */ \"./TypeScript/addemployee.ts\");\nconst index_1 = __webpack_require__(/*! ./index */ \"./TypeScript/index.ts\");\nclass employeeclass {\n    constructor() {\n        this.indexobj = new index_1.indexclass();\n        this.addemployeeobj = new addemployee_1.addemployeeclass();\n        this.dataobj = new data_1.dataclass();\n        this.selectedLetters = []; // initialize it in the constructor\n        this.cPrev = -1;\n    }\n    Filters() {\n        document.querySelectorAll('.table-filters-list button').forEach((button) => {\n            button.addEventListener('click', (event) => {\n                console.log(\"Filters event listeners adding\");\n                const letter = button.textContent;\n                const index = this.selectedLetters.indexOf(letter);\n                if (index !== -1) {\n                    this.selectedLetters.splice(index, 1);\n                    button.classList.remove('filteractive');\n                }\n                else {\n                    this.selectedLetters.push(letter);\n                    button.classList.add('filteractive');\n                }\n                this.filterTableByFirstLetters(this.selectedLetters);\n                console.log(this.selectedLetters);\n                const filtericon = document.getElementById('table-filters-icon');\n                if (this.selectedLetters.length == 0) {\n                    filtericon.style.filter = \"\";\n                }\n                else {\n                    filtericon.style.filter = \"invert(18%) sepia(98%) saturate(7171%) hue-rotate(359deg) brightness(101%) contrast(114%)\";\n                }\n            });\n        });\n    }\n    resetFilters() {\n        const statusSelect = document.getElementById('filter-Status');\n        const locationSelect = document.getElementById('filter-Location');\n        const departmentSelect = document.getElementById('filter-Department');\n        statusSelect.selectedIndex = 0;\n        locationSelect.selectedIndex = 0;\n        departmentSelect.selectedIndex = 0;\n        if (statusSelect.value == \"\" && locationSelect.value == \"\" && departmentSelect.value == \"\") {\n            const filterinactive = document.getElementById('filters-reset-apply-buttons');\n            filterinactive.style.display = \"none\";\n        }\n    }\n    filterTableByFirstLettersReset() {\n        this.selectedLetters = [];\n        this.filterTableByFirstLetters(this.selectedLetters);\n        const buttons = document.querySelectorAll('.table-filters-list button');\n        buttons.forEach((button) => {\n            button.classList.remove('filteractive');\n        });\n        const filtericon = document.getElementById('table-filters-icon');\n        filtericon.style.filter = \"\";\n        this.resetFilters();\n    }\n    filterTableByFirstLetters(letters) {\n        const localdata = JSON.parse(localStorage.getItem(\"data\") || \"{}\");\n        const employees = localdata.Employees;\n        let emp_filter_sort_data; // Declare the variable here\n        if (letters.length > 0 && employees.length > 0) {\n            emp_filter_sort_data = employees.filter((employee) => {\n                const firstLetter = employee.firstname.trim().charAt(0).toUpperCase();\n                return letters.indexOf(firstLetter) !== -1; // Fix: Use indexOf instead of includes\n            });\n        }\n        else {\n            emp_filter_sort_data = employees;\n        }\n        this.dataobj.LoadEmployeeDataByArray(emp_filter_sort_data);\n        this.resetFilters();\n    }\n    checkboxes() {\n        var _a;\n        (_a = document.getElementById('table-header-checkbox')) === null || _a === void 0 ? void 0 : _a.addEventListener('change', () => {\n            var _a;\n            const checkboxes = document.querySelectorAll('#employees-table tbody tr input[type=\"checkbox\"]');\n            checkboxes.forEach((checkbox) => {\n                var _a;\n                checkbox.checked = (_a = document.getElementById('table-header-checkbox')) === null || _a === void 0 ? void 0 : _a.checked;\n            });\n            if ((_a = document.getElementById('table-header-checkbox')) === null || _a === void 0 ? void 0 : _a.checked) {\n                const del = document.getElementById('emp-table-delete');\n                del.classList.remove('lightred-red-button');\n                del.classList.add('red-white-button');\n            }\n            else {\n                const del = document.getElementById('emp-table-delete');\n                del.classList.add('lightred-red-button');\n                del.classList.remove('red-white-button');\n            }\n        });\n    }\n    checkboxIsChecked() {\n        const checkboxes = document.querySelectorAll('#employees-table tbody tr input[type=\"checkbox\"]');\n        checkboxes.forEach((checkbox) => {\n            checkbox.addEventListener('change', () => {\n                const parentCheckbox = document.getElementById('table-header-checkbox');\n                const checkboxes = document.querySelectorAll('#employees-table tbody tr input[type=\"checkbox\"]');\n                const allChecked = Array.from(checkboxes).every((checkbox) => checkbox.checked);\n                parentCheckbox.checked = allChecked;\n                if (Array.from(checkboxes).some((checkbox) => checkbox.checked)) {\n                    const del = document.getElementById('emp-table-delete');\n                    del.classList.remove('lightred-red-button');\n                    del.classList.add('red-white-button');\n                }\n                else {\n                    const del = document.getElementById('emp-table-delete');\n                    del.classList.add('lightred-red-button');\n                    del.classList.remove('red-white-button');\n                }\n            });\n        });\n    }\n    filtersReset() {\n        const statusSelect = document.getElementById('filter-Status');\n        const locationSelect = document.getElementById('filter-Location');\n        const departmentSelect = document.getElementById('filter-Department');\n        statusSelect.selectedIndex = 0;\n        locationSelect.selectedIndex = 0;\n        departmentSelect.selectedIndex = 0;\n        this.filterEmployeesTable();\n        this.filterTableByFirstLetters(this.selectedLetters);\n        if (statusSelect.value == \"\" && locationSelect.value == \"\" && departmentSelect.value == \"\") {\n            const filterinactive = document.getElementById('filters-reset-apply-buttons');\n            filterinactive.style.display = \"none\";\n        }\n    }\n    filterEmployeesTable() {\n        const statusSelect = document.getElementById('filter-Status').value;\n        const locationSelect = document.getElementById('filter-Location').value;\n        const departmentSelect = document.getElementById('filter-Department').value;\n        if (statusSelect === \"\" && locationSelect === \"\" && departmentSelect === \"\") {\n            const rows = document.querySelectorAll('#employees-table tbody tr');\n            rows.forEach((row) => {\n                row.style.display = '';\n            });\n        }\n        else {\n            const rows = document.querySelectorAll('#employees-table tbody tr');\n            rows.forEach((row) => {\n                const statusCell = row.querySelector('td:nth-child(7)');\n                const locationCell = row.querySelector('td:nth-child(3)');\n                const departmentCell = row.querySelector('td:nth-child(4)');\n                if ((statusSelect !== \"\" && statusCell.textContent !== statusSelect) || (locationSelect !== \"\" && locationCell.textContent !== locationSelect) || (departmentSelect !== \"\" && departmentCell.textContent !== departmentSelect)) {\n                    row.style.display = 'none';\n                }\n                else {\n                    row.style.display = '';\n                }\n            });\n        }\n    }\n    populateFilterOptions(selector, filterId) {\n        const cells = document.querySelectorAll(selector);\n        const options = document.getElementById(filterId);\n        let values = Array.from(cells).map((cell) => cell.textContent);\n        values = [...new Set(values)];\n        values.forEach((value) => {\n            const option = document.createElement('option');\n            option.value = value;\n            option.textContent = value;\n            options.appendChild(option);\n        });\n    }\n    checkFilterStatus() {\n        const statusSelect = document.getElementById('filter-Status');\n        const locationSelect = document.getElementById('filter-Location');\n        const departmentSelect = document.getElementById('filter-Department');\n        const filterButtons = document.getElementById('filters-reset-apply-buttons');\n        filterButtons.style.display = (statusSelect.value || locationSelect.value || departmentSelect.value) ? \"\" : \"none\";\n    }\n    LoadFilterOptions() {\n        this.populateFilterOptions('#employees-table tbody tr td:nth-child(3)', 'filter-Location');\n        this.populateFilterOptions('#employees-table tbody tr td:nth-child(4)', 'filter-Department');\n        this.populateFilterOptions('#employees-table tbody tr td:nth-child(7)', 'filter-Status');\n        ['filter-Status', 'filter-Location', 'filter-Department'].forEach((filterId) => {\n            const filterElement = document.getElementById(filterId);\n            if (filterElement) {\n                filterElement.addEventListener('change', this.checkFilterStatus);\n            }\n        });\n        this.checkFilterStatus();\n    }\n    sortBy(c) {\n        var _a;\n        const table = document.getElementById(\"employees-table\");\n        const rows = table.rows.length;\n        const columns = table.rows[0].cells.length;\n        const arrTable = [];\n        for (let ro = 0; ro < rows; ro++) {\n            const row = table.rows[ro];\n            if (row.style.display !== 'none') {\n                const arrRow = [];\n                for (let co = 0; co < columns; co++) {\n                    arrRow[co] = row.cells[co].innerHTML;\n                }\n                arrTable.push(arrRow);\n            }\n        }\n        const th = arrTable.shift();\n        this.cPrev = c;\n        arrTable.unshift(th);\n        for (let ro = 0; ro < rows; ro++) {\n            for (let co = 0; co < columns; co++) {\n                const table = document.getElementById(\"employees-table\");\n                if (table) {\n                    const cell = (_a = table.rows[ro]) === null || _a === void 0 ? void 0 : _a.cells[co];\n                    if (cell) {\n                        cell.innerHTML = arrTable[ro][co];\n                    }\n                }\n            }\n        }\n    }\n    deleteEmployees() {\n        try {\n            const checkboxes = document.querySelectorAll('#employees-table tbody tr input[type=\"checkbox\"]');\n            const data = JSON.parse(localStorage.getItem(\"data\") || \"{}\");\n            if (!data || !data.Employees) {\n                console.error(\"No employee data found in local storage.\");\n                return;\n            }\n            let employees = data.Employees;\n            const isEmployeeSelected = Array.from(checkboxes).some((checkbox) => checkbox.checked);\n            if (!isEmployeeSelected) {\n                console.error(\"No employee selected for deletion.\");\n                return;\n            }\n            const confirmation = confirm(\"Are you sure you want to delete the selected employees?\");\n            if (!confirmation) {\n                return;\n            }\n            checkboxes.forEach((checkbox) => {\n                if (checkbox.checked) {\n                    employees = employees.filter((employee) => employee.empid !== checkbox.id);\n                    console.log(\"employee: \", employees);\n                }\n            });\n            data.Employees = employees;\n            localStorage.setItem(\"data\", JSON.stringify(data));\n            this.indexobj.EmployeeMenu();\n            this.indexobj.CustomAlert(\"success\", \"Selected employees deleted successfully.\");\n        }\n        catch (error) {\n            console.error(\"An error occurred while deleting employees: \", error);\n        }\n    }\n    deleteEmployee(empid) {\n        try {\n            const confirmation = confirm(\"Are you sure you want to delete this ( \" + empid + \" ) employee?\");\n            if (!confirmation) {\n                return;\n            }\n            const data = JSON.parse(localStorage.getItem(\"data\") || \"{}\");\n            if (!data || !data.Employees) {\n                this.indexobj.CustomAlert(\"error\", \"No employee data found in local storage.\");\n                return;\n            }\n            let employees = data.Employees;\n            employees = employees.filter((employee) => employee.empid !== empid);\n            data.Employees = employees;\n            localStorage.setItem(\"data\", JSON.stringify(data));\n            this.indexobj.EmployeeMenu();\n            this.indexobj.CustomAlert(\"success\", \"Selected employee deleted successfully.\");\n        }\n        catch (error) {\n            this.indexobj.CustomAlert(\"error\", \"An error occurred while deleting employees: \" + error);\n        }\n    }\n    viewmore(empid) {\n        const divs = document.querySelectorAll(\".emp-table-more\");\n        empid = empid + \"_div\";\n        divs.forEach((div) => {\n            if (div.id !== empid) {\n                div.style.display = \"none\";\n            }\n        });\n        const divMore = document.querySelector(\"#\" + empid);\n        if (divMore.style.display == \"none\") {\n            divMore.style.display = \"flex\";\n        }\n        else {\n            divMore.style.display = \"none\";\n        }\n    }\n    EditEmployeeDetails(empid) {\n        const data = JSON.parse(localStorage.getItem(\"data\") || \"{}\");\n        if (!data || !data.Employees) {\n            this.indexobj.CustomAlert(\"error\", \"No employee data found in local storage.\");\n            return;\n        }\n        const employee = data.Employees.find((emp) => emp.empid === empid);\n        const mainContainer = document.querySelector(\".main-content\");\n        fetch(\"HTML/AddEmployee.html\")\n            .then((res) => res.text())\n            .then((data) => {\n            mainContainer.innerHTML = data;\n        })\n            .then(() => {\n            const employeeMenu = document.querySelector(\"#employee-menu\");\n            employeeMenu.classList.add(\"menuactive\");\n            const rolesMenu = document.querySelector(\"#roles-menu\");\n            rolesMenu.classList.remove(\"menuactive\");\n        })\n            .then(() => {\n            this.addemployeeobj.addemployeeFormSubmitValidation();\n        })\n            .then(() => {\n            const addEmployeeTitle = document.getElementById(\"add-employee-title\");\n            const formSubmit = document.getElementById('form-submit');\n            const addOrEditEmployeeFlag = document.getElementById('add-or-edit-employee-flag');\n            const empid = document.getElementById('empid');\n            const firstname = document.getElementById('firstname');\n            const lastname = document.getElementById('lastname');\n            const dob = document.getElementById('dob');\n            const email = document.getElementById('email');\n            const mobile = document.getElementById('mobile');\n            const joiningdate = document.getElementById('joiningdate');\n            const location = document.getElementById('location');\n            const assignmanager = document.getElementById('assignmanager');\n            const assignproject = document.getElementById('assignproject');\n            const department = document.getElementById('department');\n            const jobtitle = document.getElementById('jobtitle');\n            const uploadedImgPreview = document.getElementById('uploaded-img-preview');\n            if (addEmployeeTitle) {\n                addEmployeeTitle.innerText = \"Edit Employee\";\n            }\n            if (formSubmit) {\n                formSubmit.innerText = \"Update Employee\";\n            }\n            if (addOrEditEmployeeFlag) {\n                addOrEditEmployeeFlag.value = \"edit\";\n            }\n            if (empid) {\n                empid.value = employee.empid;\n                empid.setAttribute('readonly', 'readonly');\n            }\n            if (firstname) {\n                firstname.value = employee.firstname;\n            }\n            if (lastname) {\n                lastname.value = employee.lastname;\n            }\n            if (dob) {\n                dob.value = employee.DOB;\n            }\n            if (email) {\n                email.value = employee.emailid;\n            }\n            if (mobile) {\n                mobile.value = employee.mobile;\n            }\n            if (joiningdate) {\n                joiningdate.value = employee.joining;\n            }\n            if (location) {\n                location.value = employee.location;\n            }\n            if (assignmanager) {\n                assignmanager.value = employee.AssignManager;\n            }\n            if (assignproject) {\n                assignproject.value = employee.AssignProject;\n            }\n            if (department) {\n                department.value = employee.Department;\n            }\n            if (jobtitle) {\n                jobtitle.value = employee.jobtitle;\n            }\n            if (uploadedImgPreview) {\n                uploadedImgPreview.src = employee.profilepath;\n            }\n        })\n            .catch((error) => console.error('Error:', error));\n    }\n}\nexports.employeeclass = employeeclass;\n\n\n//# sourceURL=webpack://bundling-ts-files/./TypeScript/employee.ts?");

/***/ }),

/***/ "./TypeScript/index.ts":
/*!*****************************!*\
  !*** ./TypeScript/index.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.indexclass = void 0;\nconst data_1 = __webpack_require__(/*! ./data */ \"./TypeScript/data.ts\");\nconst employee_1 = __webpack_require__(/*! ./employee */ \"./TypeScript/employee.ts\");\nconst addemployee_1 = __webpack_require__(/*! ./addemployee */ \"./TypeScript/addemployee.ts\");\nclass indexclass {\n    constructor() {\n        this.addemployeeclassobj = new addemployee_1.addemployeeclass();\n        this.employeeclassobj = new employee_1.employeeclass();\n        this.dataobj = new data_1.dataclass();\n    }\n    // sidebar toggle \n    toggleSidebar() {\n        const sidebar = document.querySelector(\".sidebar\");\n        const mainContainer = document.querySelector(\".main-container\");\n        const closedSidebarElements = document.querySelectorAll(\".closed-sidebar\");\n        const min_logo = document.querySelector(\".sidebar-closed-logo\");\n        sidebar === null || sidebar === void 0 ? void 0 : sidebar.classList.toggle(\"toggleopen\");\n        mainContainer === null || mainContainer === void 0 ? void 0 : mainContainer.classList.toggle(\"sidebar-open\");\n        // If the sidebar is open\n        if (sidebar === null || sidebar === void 0 ? void 0 : sidebar.classList.contains(\"toggleopen\")) {\n            // Remove the 'closed-sidebar-active' class from each 'closed-sidebar' element\n            closedSidebarElements.forEach(element => {\n                element.classList.remove(\"closed-sidebar-active\");\n            });\n            if (min_logo) {\n                min_logo.style.display = \"none\";\n            }\n        }\n        else {\n            // If the sidebar is closed, add the 'closed-sidebar-active' class to each 'closed-sidebar' element\n            closedSidebarElements.forEach(element => {\n                element.classList.add(\"closed-sidebar-active\");\n            });\n            if (min_logo) {\n                min_logo.style.display = \"block\";\n            }\n        }\n    }\n    // including sidebar html code\n    NavbarLoad() {\n        const sidebarcontainer = document.querySelector(\".sidebar-container\");\n        fetch(\"HTML/sidebar.html\")\n            .then((res) => res.text())\n            .then((data) => {\n            if (sidebarcontainer) {\n                sidebarcontainer.innerHTML = data;\n            }\n        })\n            .catch((error) => console.error('Error:', error));\n        // including searchbar html code\n        const searchbar = document.querySelector(\".searchbar-container\");\n        fetch(\"HTML/searchbar.html\")\n            .then((res) => res.text())\n            .then((data) => {\n            if (searchbar) {\n                searchbar.innerHTML = data;\n            }\n        })\n            .catch((error) => console.error('Error:', error));\n    }\n    // employee table page\n    EmployeeMenu() {\n        const mainContainer = document.querySelector(\".main-content\");\n        fetch(\"HTML/employee.html\")\n            .then((res) => res.text())\n            .then((data) => {\n            if (mainContainer) {\n                mainContainer.innerHTML = data;\n            }\n        })\n            .then(() => {\n            this.dataobj.loadEmployeeData();\n            this.employeeclassobj.Filters();\n            this.employeeclassobj.checkboxes();\n        })\n            .then(() => {\n            setTimeout(() => {\n                this.employeeclassobj.checkboxIsChecked();\n                this.employeeclassobj.LoadFilterOptions();\n            }, 1000);\n        })\n            .then(() => {\n            const employeeMenu = document.querySelector(\"#employee-menu\");\n            employeeMenu === null || employeeMenu === void 0 ? void 0 : employeeMenu.classList.add(\"menuactive\");\n            // remove active class from other menu\n            const rolesMenu = document.querySelector(\"#roles-menu\");\n            rolesMenu === null || rolesMenu === void 0 ? void 0 : rolesMenu.classList.remove(\"menuactive\");\n        })\n            .catch((error) => console.error('Error:', error));\n    }\n    //roles menu page\n    RolesMenu() {\n        const mainContainer = document.querySelector(\".main-content\");\n        fetch(\"HTML/roles.html\")\n            .then((res) => res.text())\n            .then((data) => {\n            if (mainContainer) {\n                mainContainer.innerHTML = data;\n            }\n        })\n            .then(() => {\n            const rolesMenu = document.querySelector(\"#roles-menu\");\n            rolesMenu === null || rolesMenu === void 0 ? void 0 : rolesMenu.classList.add(\"menuactive\");\n            // remove active class from other menu\n            const employeeMenu = document.querySelector(\"#employee-menu\");\n            employeeMenu === null || employeeMenu === void 0 ? void 0 : employeeMenu.classList.remove(\"menuactive\");\n        })\n            .catch((error) => console.error('Error:', error));\n    }\n    // role details page\n    RoleDetails() {\n        const mainContainer = document.querySelector(\".main-content\");\n        fetch(\"HTML/roledetails.html\")\n            .then((res) => res.text())\n            .then((data) => {\n            if (mainContainer) {\n                mainContainer.innerHTML = data;\n            }\n        })\n            .then(() => {\n            const employeeMenu = document.querySelector(\"#employee-menu\");\n            employeeMenu === null || employeeMenu === void 0 ? void 0 : employeeMenu.classList.remove(\"menuactive\");\n            // remove active class from other menu\n            const rolesMenu = document.querySelector(\"#roles-menu\");\n            rolesMenu === null || rolesMenu === void 0 ? void 0 : rolesMenu.classList.add(\"menuactive\");\n        })\n            .catch((error) => console.error('Error:', error));\n    }\n    // Add employee page\n    addemployeepage() {\n        const mainContainer = document.querySelector(\".main-content\");\n        fetch(\"HTML/AddEmployee.html\")\n            .then((res) => res.text())\n            .then((data) => {\n            if (mainContainer) {\n                mainContainer.innerHTML = data;\n            }\n        })\n            .then(() => {\n            const employeeMenu = document.querySelector(\"#employee-menu\");\n            employeeMenu === null || employeeMenu === void 0 ? void 0 : employeeMenu.classList.add(\"menuactive\");\n            const rolesMenu = document.querySelector(\"#roles-menu\");\n            rolesMenu === null || rolesMenu === void 0 ? void 0 : rolesMenu.classList.remove(\"menuactive\");\n        })\n            .then(() => {\n            this.addemployeeclassobj.addEmployeeEventListeners();\n            this.addemployeeclassobj.addemployeeFormSubmitValidation();\n        })\n            .catch((error) => console.error('Error:', error));\n    }\n    // add role page\n    addrolepage() {\n        const mainContainer = document.querySelector(\".main-content\");\n        fetch(\"HTML/AddRole.html\")\n            .then((res) => res.text())\n            .then((data) => {\n            if (mainContainer) {\n                mainContainer.innerHTML = data;\n            }\n        })\n            .then(() => {\n            const employeeMenu = document.querySelector(\"#employee-menu\");\n            employeeMenu === null || employeeMenu === void 0 ? void 0 : employeeMenu.classList.remove(\"menuactive\");\n            const rolesMenu = document.querySelector(\"#roles-menu\");\n            rolesMenu === null || rolesMenu === void 0 ? void 0 : rolesMenu.classList.add(\"menuactive\");\n        })\n            .catch((error) => console.error('Error:', error));\n    }\n    // default  employee page load\n    defaultpage() {\n        this.NavbarLoad();\n        this.EmployeeMenu();\n    }\n    // toaster messages for success, warning, info, and error types\n    CustomAlert(status, message) {\n        var _a;\n        const alertContainer = document.querySelector('.alert-messages');\n        const alertDiv = document.createElement('div');\n        let countdown = 5; // Set the initial countdown value\n        alertDiv.className = 'alert alert-' + status;\n        alertDiv.innerText = message + ' \\n ' + countdown + ' seconds.';\n        (_a = document.querySelector('.alert-messages')) === null || _a === void 0 ? void 0 : _a.classList.add('show');\n        alertContainer === null || alertContainer === void 0 ? void 0 : alertContainer.appendChild(alertDiv);\n        // Update the countdown every second\n        const countdownInterval = setInterval(() => {\n            countdown--;\n            if (countdown >= 0) {\n                alertDiv.innerText = message + '.\\n' + countdown + ' seconds.';\n            }\n        }, 1000);\n        setTimeout(() => {\n            var _a;\n            clearInterval(countdownInterval); // Stop the countdown\n            alertDiv.remove();\n            (_a = document.querySelector('.alert-messages')) === null || _a === void 0 ? void 0 : _a.classList.remove('show');\n        }, 5000);\n    }\n}\nexports.indexclass = indexclass;\n\n\n//# sourceURL=webpack://bundling-ts-files/./TypeScript/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__("./TypeScript/index.ts");
/******/ 	__webpack_require__("./TypeScript/addemployee.ts");
/******/ 	__webpack_require__("./TypeScript/employee.ts");
/******/ 	var __webpack_exports__ = __webpack_require__("./TypeScript/data.ts");
/******/ 	
/******/ })()
;