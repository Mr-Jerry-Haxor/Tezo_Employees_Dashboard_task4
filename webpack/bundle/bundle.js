/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./CSS/addemployee.css":
/*!*****************************!*\
  !*** ./CSS/addemployee.css ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://bundling-ts-files/./CSS/addemployee.css?");

/***/ }),

/***/ "./CSS/addrole.css":
/*!*************************!*\
  !*** ./CSS/addrole.css ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://bundling-ts-files/./CSS/addrole.css?");

/***/ }),

/***/ "./CSS/employee.css":
/*!**************************!*\
  !*** ./CSS/employee.css ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://bundling-ts-files/./CSS/employee.css?");

/***/ }),

/***/ "./CSS/index.css":
/*!***********************!*\
  !*** ./CSS/index.css ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://bundling-ts-files/./CSS/index.css?");

/***/ }),

/***/ "./CSS/roledetails.css":
/*!*****************************!*\
  !*** ./CSS/roledetails.css ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://bundling-ts-files/./CSS/roledetails.css?");

/***/ }),

/***/ "./CSS/roles.css":
/*!***********************!*\
  !*** ./CSS/roles.css ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://bundling-ts-files/./CSS/roles.css?");

/***/ }),

/***/ "./CSS/sidebar.css":
/*!*************************!*\
  !*** ./CSS/sidebar.css ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://bundling-ts-files/./CSS/sidebar.css?");

/***/ }),

/***/ "./TypeScript/addemployee.ts":
/*!***********************************!*\
  !*** ./TypeScript/addemployee.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addEmployeeEventListenersClass: () => (/* binding */ addEmployeeEventListenersClass),\n/* harmony export */   addemployeeclass: () => (/* binding */ addemployeeclass)\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ \"./TypeScript/index.ts\");\n/* harmony import */ var _employee__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./employee */ \"./TypeScript/employee.ts\");\n\r\n\r\nclass addemployeeclass {\r\n    constructor() {\r\n        this.employeeclassobj = new _employee__WEBPACK_IMPORTED_MODULE_1__.employeeclass();\r\n        this.alertobj = new _index__WEBPACK_IMPORTED_MODULE_0__.CustomAlertclass();\r\n    }\r\n    getFieldValue(fieldId) {\r\n        return document.getElementById(fieldId).value;\r\n    }\r\n    addEmployee() {\r\n        const fields = ['empid', 'firstname', 'lastname', 'dob', 'email', 'mobile', 'joiningdate', 'location', 'department'];\r\n        let isValid = true;\r\n        let employee = {};\r\n        fields.forEach((fieldId) => {\r\n            const field = document.getElementById(fieldId);\r\n            const errorSpan = document.getElementById(`${fieldId}-span`);\r\n            if (field.value.trim() === '') {\r\n                field.classList.add('err');\r\n                errorSpan.innerHTML = `<img src='assets/exclamation-mark-diamond.svg' alt='error' style='height:15px' > This ${fieldId} field is required`;\r\n                isValid = false;\r\n            }\r\n            else if (!field.checkValidity()) {\r\n                field.classList.add('err');\r\n                errorSpan.innerHTML = `<img src='assets/exclamation-mark-diamond.svg' alt='error' style='height:15px' > Please enter the valid data`;\r\n                isValid = false;\r\n            }\r\n            else {\r\n                field.classList.remove('err');\r\n                errorSpan.innerText = '';\r\n            }\r\n        });\r\n        var data = JSON.parse(localStorage.getItem(\"data\") || '{}');\r\n        var employees = data ? data.Employees : null;\r\n        if (data && employees) {\r\n            var exists = false;\r\n            var empid = this.getFieldValue('empid');\r\n            var AddOrEditFlag = this.getFieldValue('add-or-edit-employee-flag');\r\n            employees.forEach((employee) => {\r\n                if (employee.empid === empid && AddOrEditFlag === \"add\") {\r\n                    this.alertobj.CustomAlert('error', 'Employee ID already exists');\r\n                    exists = true;\r\n                    return false;\r\n                }\r\n            });\r\n            if (AddOrEditFlag === \"add\" && isValid && !exists) {\r\n                employee = {\r\n                    \"empid\": this.getFieldValue('empid'),\r\n                    \"firstname\": this.getFieldValue('firstname'),\r\n                    \"lastname\": this.getFieldValue('lastname'),\r\n                    \"DOB\": this.getFieldValue('dob'),\r\n                    \"emailid\": this.getFieldValue('email'),\r\n                    \"mobile\": this.getFieldValue('mobile'),\r\n                    \"location\": this.getFieldValue('location'),\r\n                    \"Department\": this.getFieldValue('department'),\r\n                    \"jobtitle\": this.getFieldValue('jobtitle'),\r\n                    \"profilepath\": document.getElementById('uploaded-img-preview').src,\r\n                    \"joining\": this.getFieldValue('joiningdate'),\r\n                    \"AssignManager\": this.getFieldValue('assignmanager'),\r\n                    \"AssignProject\": this.getFieldValue('assignproject'),\r\n                    \"status\": \"Active\"\r\n                };\r\n                let localdata = JSON.parse(localStorage.getItem(\"data\") || '{}');\r\n                localdata.Employees.push(employee);\r\n                localStorage.setItem(\"data\", JSON.stringify(localdata));\r\n                this.employeeclassobj.EmployeeMenu();\r\n                this.alertobj.CustomAlert('success', 'Employee added successfully');\r\n            }\r\n            else if (AddOrEditFlag === \"edit\" && isValid) {\r\n                let employee = employees.find((emp) => emp.empid === empid);\r\n                Object.assign(employee, {\r\n                    \"empid\": this.getFieldValue('empid'),\r\n                    \"firstname\": this.getFieldValue('firstname'),\r\n                    \"lastname\": this.getFieldValue('lastname'),\r\n                    \"DOB\": this.getFieldValue('dob'),\r\n                    \"emailid\": this.getFieldValue('email'),\r\n                    \"mobile\": this.getFieldValue('mobile'),\r\n                    \"location\": this.getFieldValue('location'),\r\n                    \"Department\": this.getFieldValue('department'),\r\n                    \"jobtitle\": this.getFieldValue('jobtitle'),\r\n                    \"profilepath\": document.getElementById('uploaded-img-preview').src,\r\n                    \"joining\": this.getFieldValue('joiningdate'),\r\n                    \"AssignManager\": this.getFieldValue('assignmanager'),\r\n                    \"AssignProject\": this.getFieldValue('assignproject'),\r\n                    \"status\": \"Active\"\r\n                });\r\n                localStorage.setItem(\"data\", JSON.stringify(data));\r\n                this.employeeclassobj.EmployeeMenu();\r\n                this.alertobj.CustomAlert('success', 'Employee updated successfully');\r\n            }\r\n        }\r\n        else {\r\n            console.error('Data or Employees is null');\r\n        }\r\n    }\r\n}\r\nclass addEmployeeEventListenersClass {\r\n    addEmployeeEventListeners() {\r\n        const fields = ['empid', 'firstname', 'lastname', 'dob', 'email', 'mobile', 'joiningdate', 'location', 'department'];\r\n        const fieldsinfo = {\r\n            'empid': 'Invalid Format, Only TZ123456 allowed',\r\n            'firstname': 'Invalid Format, Only alphabets allowed',\r\n            'lastname': 'Invalid Format, Only alphabets allowed',\r\n            'dob': 'Invalid Format, Only DD/MM/YYYY allowed',\r\n            'email': 'Invalid Format, Only joe.a@technovert.com allowed',\r\n            'mobile': 'Invalid Format, Only digits allowed',\r\n            'joiningdate': 'Invalid Format, Only DD/MM/YYYY allowed',\r\n            'location': 'Invalid Format, Only alphabets allowed',\r\n            'department': 'Invalid Format, Only alphabets allowed'\r\n        };\r\n        fields.forEach((fieldId) => {\r\n            const field = document.getElementById(fieldId);\r\n            const errorSpan = document.getElementById(`${fieldId}-span`);\r\n            field.addEventListener('input', () => {\r\n                if (field.value.trim() === '') {\r\n                    field.classList.add('err');\r\n                    errorSpan.innerHTML = `<img src='assets/exclamation-mark-diamond.svg' alt='error' style='height:15px' > This ${fieldId} field is required`;\r\n                }\r\n                else if (!field.checkValidity()) {\r\n                    field.classList.add('err');\r\n                    errorSpan.innerHTML = `<img src='assets/exclamation-mark-diamond.svg' alt='error' style='height:15px' > ${fieldsinfo[fieldId]}`;\r\n                }\r\n                else {\r\n                    field.classList.remove('err');\r\n                    errorSpan.innerText = '';\r\n                }\r\n            });\r\n        });\r\n        //add data of birth validation eventlistner\r\n        const dobElement = document.getElementById('dob');\r\n        if (dobElement) {\r\n            dobElement.addEventListener('input', () => {\r\n                // check if the  date is valid and has 18+ years for the present date\r\n                var dobInput = dobElement.value;\r\n                var dob = dobInput.split('/').reverse().join('-');\r\n                var dobDate = new Date(dob);\r\n                var today = new Date();\r\n                var age = today.getFullYear() - dobDate.getFullYear();\r\n                var m = today.getMonth() - dobDate.getMonth();\r\n                if (m < 0 || (m === 0 && today.getDate() < dobDate.getDate())) {\r\n                    age--;\r\n                }\r\n                if (isNaN(age)) {\r\n                    dobElement.classList.add('err');\r\n                    document.getElementById('dob-span').innerHTML = \"<img src='assets/exclamation-mark-diamond.svg' alt='error' style='height:15px' > \" + \"Invalid Date , Only DD/MM/YYYY allowed\";\r\n                }\r\n                else if (age < 18) {\r\n                    dobElement.classList.add('err');\r\n                    document.getElementById('dob-span').innerHTML = \"<img src='assets/exclamation-mark-diamond.svg' alt='error' style='height:15px' > \" + \"You must be 18 years or older to register\";\r\n                }\r\n                else {\r\n                    dobElement.classList.remove('err');\r\n                    document.getElementById('dob-span').innerText = '';\r\n                }\r\n                dobElement.value = dobInput.replace(/^(\\d\\d)(\\d)$/g, '$1/$2').replace(/^(\\d\\d\\/\\d\\d)(\\d+)$/g, '$1/$2').replace(/[^\\d\\/]/g, '');\r\n            });\r\n        }\r\n    }\r\n    addemployeeFormSubmitValidation() {\r\n        const form = document.getElementById('add-employee-form');\r\n        form.addEventListener('submit', event => {\r\n            event.preventDefault();\r\n            this.addEmployeeEventListeners();\r\n        });\r\n        form.addEventListener(\"keypress\", event => {\r\n            if (event.key === \"Enter\") {\r\n                event.preventDefault();\r\n            }\r\n        });\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://bundling-ts-files/./TypeScript/addemployee.ts?");

/***/ }),

/***/ "./TypeScript/data.ts":
/*!****************************!*\
  !*** ./TypeScript/data.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Loaddataclass: () => (/* binding */ Loaddataclass),\n/* harmony export */   dataclass: () => (/* binding */ dataclass)\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ \"./TypeScript/index.ts\");\n\r\nclass Loaddataclass {\r\n    constructor() {\r\n        this.emp_filter_sort_data = [];\r\n    }\r\n    loadEmployeeData() {\r\n        fetch(\"data.json\")\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n            if (localStorage.getItem(\"data\") === null) {\r\n                localStorage.setItem(\"data\", JSON.stringify(data));\r\n            }\r\n            let localdata = JSON.parse(localStorage.getItem(\"data\") || \"{}\");\r\n            let employees = localdata.Employees;\r\n            this.emp_filter_sort_data = employees;\r\n            this.LoadEmployeeDataByArray(employees);\r\n        })\r\n            .catch((error) => console.error('Error:', error));\r\n    }\r\n    LoadEmployeeDataByArray(employeeArray) {\r\n        // get table by id and clear table body\r\n        let table = document.getElementById(\"employees-table\");\r\n        // only delete if table has rows\r\n        if (table.rows.length > 0) {\r\n            // only delete the tbody\r\n            while (table.rows.length > 1) {\r\n                table.deleteRow(-1);\r\n            }\r\n        }\r\n        let employees = employeeArray;\r\n        employees.forEach((employee) => {\r\n            let row = document.createElement('tr');\r\n            row.className = \"border-bottom\";\r\n            let cellCheckbox = document.createElement('td');\r\n            let checkbox = document.createElement('input');\r\n            checkbox.type = \"checkbox\";\r\n            checkbox.id = employee.empid;\r\n            cellCheckbox.appendChild(checkbox);\r\n            row.appendChild(cellCheckbox);\r\n            let cellProfile = document.createElement('td');\r\n            let divProfileContainer = document.createElement('div');\r\n            divProfileContainer.className = \"profile-container\";\r\n            let imgProfile = document.createElement('img');\r\n            imgProfile.src = employee.profilepath;\r\n            imgProfile.alt = \"Profile Image\";\r\n            imgProfile.className = \"profile-image\";\r\n            divProfileContainer.appendChild(imgProfile);\r\n            let divProfileInfo = document.createElement('div');\r\n            divProfileInfo.className = \"profile-info\";\r\n            let spanProfileName = document.createElement('span');\r\n            spanProfileName.className = \"profile-name\";\r\n            spanProfileName.textContent = employee.firstname + employee.lastname;\r\n            divProfileInfo.appendChild(spanProfileName);\r\n            let spanProfileEmail = document.createElement('span');\r\n            spanProfileEmail.className = \"profile-email\";\r\n            spanProfileEmail.textContent = employee.emailid;\r\n            divProfileInfo.appendChild(spanProfileEmail);\r\n            divProfileContainer.appendChild(divProfileInfo);\r\n            cellProfile.appendChild(divProfileContainer);\r\n            row.appendChild(cellProfile);\r\n            let cellCity = document.createElement('td');\r\n            cellCity.textContent = employee.location;\r\n            row.appendChild(cellCity);\r\n            let cellDepartment = document.createElement('td');\r\n            cellDepartment.textContent = employee.Department;\r\n            row.appendChild(cellDepartment);\r\n            let cellRole = document.createElement('td');\r\n            cellRole.textContent = employee.jobtitle;\r\n            row.appendChild(cellRole);\r\n            let cellId = document.createElement('td');\r\n            cellId.textContent = employee.empid;\r\n            row.appendChild(cellId);\r\n            let cellStatus = document.createElement('td');\r\n            let spanStatus = document.createElement('span');\r\n            spanStatus.className = employee.status === 'Active' ? 'table-status-active' : 'table-status-inactive';\r\n            spanStatus.textContent = employee.status;\r\n            cellStatus.appendChild(spanStatus);\r\n            row.appendChild(cellStatus);\r\n            let cellDate = document.createElement('td');\r\n            cellDate.textContent = employee.joining;\r\n            row.appendChild(cellDate);\r\n            let cellMore = document.createElement('td');\r\n            let buttonmore = document.createElement('button');\r\n            buttonmore.className = \"button-more\";\r\n            buttonmore.id = employee.empid + \"_more\";\r\n            buttonmore.textContent = \"...\";\r\n            // let empid: string = employee.empid + \"_more\";\r\n            // buttonmore.setAttribute(\"onclick\", \"viewmore('\" + empid + \"')\");\r\n            cellMore.appendChild(buttonmore);\r\n            let divMore = document.createElement('div');\r\n            divMore.className = \"emp-table-more\";\r\n            divMore.id = employee.empid + \"_more\" + \"_div\";\r\n            let aViewDetails = document.createElement('button');\r\n            aViewDetails.className = \"button-view-details\";\r\n            aViewDetails.textContent = \"View Details\";\r\n            let aEdit = document.createElement('button');\r\n            aEdit.className = \"button-edit\";\r\n            aEdit.id = employee.empid;\r\n            aEdit.setAttribute(\"onclick\", \"EditEmployeeDetails('\" + employee.empid + \"')\");\r\n            aEdit.textContent = \"Edit\";\r\n            let aDelete = document.createElement('button');\r\n            aDelete.className = \"button-delete\";\r\n            aDelete.id = employee.empid;\r\n            aDelete.setAttribute(\"onclick\", \"deleteEmployee('\" + employee.empid + \"')\");\r\n            aDelete.textContent = \"Delete\";\r\n            divMore.appendChild(aViewDetails);\r\n            divMore.appendChild(aEdit);\r\n            divMore.appendChild(aDelete);\r\n            // hide this divmore initially and when user click on cellmore.textcontent, show and toggle the cellmore\r\n            divMore.style.display = \"none\";\r\n            cellMore.appendChild(divMore);\r\n            row.appendChild(cellMore);\r\n            var t = document.getElementById(\"employees-table\");\r\n            var r = document.createElement(\"tr\");\r\n            r.innerHTML = row.innerHTML;\r\n            t.tBodies[0].appendChild(r);\r\n        });\r\n    }\r\n}\r\nclass dataclass {\r\n    constructor() {\r\n        this.alertobj = new _index__WEBPACK_IMPORTED_MODULE_0__.CustomAlertclass();\r\n    }\r\n    export_options() {\r\n        var exportOptions = document.querySelector(\".export-options\");\r\n        if (exportOptions.style.display === \"none\") {\r\n            exportOptions.style.display = \"flex\";\r\n        }\r\n        else {\r\n            exportOptions.style.display = \"none\";\r\n        }\r\n    }\r\n    download_table_as_csv(table_id, separator = ',') {\r\n        try {\r\n            // Select rows from table_id\r\n            var rows = document.querySelectorAll('table#' + table_id + ' tr');\r\n            // Construct csv\r\n            var csv = [];\r\n            for (var i = 0; i < rows.length; i++) {\r\n                // Skip if the row's display is none\r\n                if (rows[i].style.display === 'none') {\r\n                    continue;\r\n                }\r\n                var row = [], cols = rows[i].querySelectorAll('td, th');\r\n                for (var j = 0; j < cols.length; j++) {\r\n                    // Clean innertext to remove multiple spaces and jumpline (break csv)\r\n                    var data = cols[j].innerText.replace(/(\\r\\n|\\n|\\r)/gm, '').replace(/(\\s\\s)/gm, ' ');\r\n                    // Escape double-quote with double-double-quote\r\n                    data = data.replace(/\"/g, '\"\"');\r\n                    // Push escaped string\r\n                    row.push('\"' + data + '\"');\r\n                }\r\n                csv.push(row.join(separator));\r\n            }\r\n            var csv_string = csv.join('\\n');\r\n            // Download it\r\n            var filename = 'export_' + table_id + '_' + new Date().toLocaleDateString() + '.csv';\r\n            var link = document.createElement('a');\r\n            link.style.display = 'none';\r\n            link.setAttribute('target', '_blank');\r\n            link.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv_string));\r\n            link.setAttribute('download', filename);\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n            this.alertobj.CustomAlert('success', filename + '\\n has begin downloading');\r\n        }\r\n        catch (error) {\r\n            this.alertobj.CustomAlert('error', error.message);\r\n        }\r\n    }\r\n    // download_table_as_xlsx(table_id: string): void {\r\n    //     try {\r\n    //         // Select rows from table_id\r\n    //         const rows: NodeListOf<HTMLTableRowElement> = document.querySelectorAll('table#' + table_id + ' tr');\r\n    //         // Construct data\r\n    //         let data: any[][] = [];\r\n    //         for (let i = 0; i < rows.length; i++) {\r\n    //             // Skip if the row's display is none\r\n    //             if (rows[i].style.display === 'none') {\r\n    //                 continue;\r\n    //             }\r\n    //             let row: any[] = [], cols: NodeListOf<HTMLTableCellElement> = rows[i].querySelectorAll('td, th');\r\n    //             for (let j = 0; j < cols.length; j++) {\r\n    //                 // Clean innertext to remove multiple spaces and jumpline\r\n    //                 let cellData: string = cols[j].innerText.replace(/(\\r\\n|\\n|\\r)/gm, '').replace(/(\\s\\s)/gm, ' ')\r\n    //                 row.push(cellData);\r\n    //             }\r\n    //             data.push(row);\r\n    //         }\r\n    //         // Create a new instance of a Workbook class\r\n    //         let wb: XLSX.WorkBook = XLSX.utils.book_new();\r\n    //         // Use XLSX.utils.aoa_to_sheet to convert our data to a worksheet object\r\n    //         let ws: XLSX.WorkSheet = XLSX.utils.aoa_to_sheet(data);\r\n    //         // Append the worksheet to the workbook\r\n    //         XLSX.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n    //         // Generate XLSX file and send to client\r\n    //         let wbout: string = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });\r\n    //         let buf: ArrayBuffer = new ArrayBuffer(wbout.length);\r\n    //         let view: Uint8Array = new Uint8Array(buf);\r\n    //         for (let i = 0; i < wbout.length; i++) view[i] = wbout.charCodeAt(i) & 0xFF;\r\n    //         let blob: Blob = new Blob([buf], { type: 'application/octet-stream' });\r\n    //         // Download it\r\n    //         let filename: string = 'export_' + table_id + '_' + new Date().toLocaleDateString() + '.xlsx';\r\n    //         let link: HTMLAnchorElement = document.createElement('a');\r\n    //         link.style.display = 'none';\r\n    //         link.setAttribute('target', '_blank');\r\n    //         link.href = URL.createObjectURL(blob);\r\n    //         link.setAttribute('download', filename);\r\n    //         document.body.appendChild(link);\r\n    //         link.click();\r\n    //         document.body.removeChild(link);\r\n    //         this.alertobj.CustomAlert('success', filename + '\\nhas begin downloading');\r\n    //     } catch (error) {\r\n    //         this.alertobj.CustomAlert('error', (error as Error).message);\r\n    //     }\r\n    // }\r\n    // the below functions used for search the employee based on the search input in the add role page\r\n    searchEmployees(query) {\r\n        let localdata = JSON.parse(localStorage.getItem(\"data\") || \"{}\");\r\n        let employees = localdata.Employees;\r\n        var results = employees.filter((employee) => {\r\n            if (employee.firstname) {\r\n                var emp = employee.firstname.toLowerCase() + employee.lastname.toLowerCase();\r\n                return emp.includes(query.toLowerCase());\r\n            }\r\n            return false;\r\n        });\r\n        var resultsDiv = document.getElementById('employee-results');\r\n        resultsDiv.innerHTML = '';\r\n        resultsDiv.style.display = results.length ? 'block' : 'none';\r\n        results.forEach((employee) => {\r\n            let employeeDiv = document.createElement('div');\r\n            employeeDiv.className = 'employee';\r\n            let checkbox = document.createElement('input');\r\n            //add classname \r\n            // checkbox.className = 'employee-checkbox';\r\n            checkbox.type = 'checkbox';\r\n            checkbox.value = employee.empid;\r\n            checkbox.onchange = () => {\r\n                this.updateSelectedEmployees();\r\n            };\r\n            let img = document.createElement('img');\r\n            img.src = employee.profilepath;\r\n            let name = document.createTextNode(employee.firstname + \" \" + employee.lastname);\r\n            employeeDiv.appendChild(checkbox);\r\n            employeeDiv.appendChild(img);\r\n            employeeDiv.appendChild(name);\r\n            resultsDiv.appendChild(employeeDiv);\r\n        });\r\n    }\r\n    updateSelectedEmployees() {\r\n        var checkboxes = document.querySelectorAll('#employee-results input[type=\"checkbox\"]');\r\n        var selectedEmployees = [];\r\n        checkboxes.forEach((checkbox) => {\r\n            if (checkbox.checked) {\r\n                selectedEmployees.push(checkbox.value);\r\n            }\r\n        });\r\n        document.getElementById('selected-employees').value = selectedEmployees.join(',');\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://bundling-ts-files/./TypeScript/data.ts?");

/***/ }),

/***/ "./TypeScript/employee.ts":
/*!********************************!*\
  !*** ./TypeScript/employee.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   employeeclass: () => (/* binding */ employeeclass)\n/* harmony export */ });\n/* harmony import */ var _data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data */ \"./TypeScript/data.ts\");\n/* harmony import */ var _addemployee__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./addemployee */ \"./TypeScript/addemployee.ts\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index */ \"./TypeScript/index.ts\");\n\r\n\r\n\r\nclass employeeclass {\r\n    constructor() {\r\n        this.addemployeeobj = new _addemployee__WEBPACK_IMPORTED_MODULE_1__.addEmployeeEventListenersClass();\r\n        this.dataobj = new _data__WEBPACK_IMPORTED_MODULE_0__.dataclass();\r\n        this.alertobj = new _index__WEBPACK_IMPORTED_MODULE_2__.CustomAlertclass();\r\n        this.loaddataobj = new _data__WEBPACK_IMPORTED_MODULE_0__.Loaddataclass();\r\n        this.selectedLetters = []; // initialize it in the constructor\r\n        this.cPrev = -1;\r\n    }\r\n    // employee table page\r\n    EmployeeMenu() {\r\n        const mainContainer = document.querySelector(\".main-content\");\r\n        fetch(\"Components/employee.html\")\r\n            .then((res) => res.text())\r\n            .then((data) => {\r\n            if (mainContainer) {\r\n                mainContainer.innerHTML = data;\r\n            }\r\n        })\r\n            .then(() => {\r\n            this.loaddataobj.loadEmployeeData();\r\n        })\r\n            .then(() => {\r\n            setTimeout(() => {\r\n                this.EmployeeTableEventlisteners();\r\n                // Add event listener to the filter apply and reset\r\n                const applyFilter = document.querySelector('#apply-filter');\r\n                applyFilter === null || applyFilter === void 0 ? void 0 : applyFilter.addEventListener('click', () => {\r\n                    this.filterEmployeesTable();\r\n                });\r\n                const resetFilter = document.querySelector('#reset-filter');\r\n                resetFilter === null || resetFilter === void 0 ? void 0 : resetFilter.addEventListener('click', () => {\r\n                    this.filterEmployeesTable();\r\n                    this.filterTableByFirstLetters(this.selectedLetters);\r\n                    this.resetFilters();\r\n                });\r\n                // Get the export button and add a click event listener\r\n                const exportButton = document.querySelector('#export_options');\r\n                exportButton === null || exportButton === void 0 ? void 0 : exportButton.addEventListener('click', () => {\r\n                    this.dataobj.export_options();\r\n                });\r\n                // Get the export options buttons and add click event listeners\r\n                // const exportAsXlsxButton = document.querySelector('#export_to_xlsx');\r\n                // exportAsXlsxButton.addEventListener('click', () => {\r\n                //     this.dataobj.download_table_as_xlsx('employees-table');\r\n                // });\r\n                const exportAsCsvButton = document.querySelector('#export_to_csv');\r\n                exportAsCsvButton === null || exportAsCsvButton === void 0 ? void 0 : exportAsCsvButton.addEventListener('click', () => {\r\n                    this.dataobj.download_table_as_csv('employees-table');\r\n                });\r\n            }, 1000);\r\n        })\r\n            .then(() => {\r\n            const employeeMenu = document.querySelector(\"#employee-menu\");\r\n            employeeMenu === null || employeeMenu === void 0 ? void 0 : employeeMenu.classList.add(\"menuactive\");\r\n            // remove active class from other menu\r\n            const rolesMenu = document.querySelector(\"#roles-menu\");\r\n            rolesMenu === null || rolesMenu === void 0 ? void 0 : rolesMenu.classList.remove(\"menuactive\");\r\n        })\r\n            .catch((error) => console.error('Error:', error));\r\n    }\r\n    EmployeeTableEventlisteners() {\r\n        this.Filters();\r\n        this.checkboxes();\r\n        this.checkboxIsChecked();\r\n        this.LoadFilterOptions();\r\n        // Add event listener to the th elements for sorting the table by column\r\n        const tableHeaders = document.querySelectorAll('#employees-table th');\r\n        tableHeaders.forEach((header, index) => {\r\n            if (index === 0)\r\n                return; // Skip the first th because it's for checkboxes\r\n            header.addEventListener('click', () => {\r\n                this.sortBy(index); // Call the sortBy function with the index as argument\r\n            });\r\n        });\r\n        // Add event listener to the checkboxes delete\r\n        const deleteCheckbox = document.querySelector('#emp-table-delete');\r\n        deleteCheckbox === null || deleteCheckbox === void 0 ? void 0 : deleteCheckbox.addEventListener('click', () => {\r\n            this.deleteEmployees();\r\n        });\r\n        // Add event listener to the view more button\r\n        const viewmorebutton = document.querySelectorAll('.button-more');\r\n        viewmorebutton.forEach((button) => {\r\n            button.addEventListener('click', () => {\r\n                const empid = button.id;\r\n                this.viewmore(empid); // call the viewMore function with id as argument\r\n            });\r\n        });\r\n        // Add event listener to the delete button\r\n        const deletebutton = document.querySelectorAll('.button-delete');\r\n        deletebutton.forEach((button) => {\r\n            button.addEventListener('click', () => {\r\n                const empid = button.id;\r\n                this.deleteEmployee(empid); // call the deleteEmployee function with id as argument\r\n            });\r\n        });\r\n        // Add event listener to the edit button\r\n        const editbutton = document.querySelectorAll('.button-edit');\r\n        editbutton.forEach((button) => {\r\n            button.addEventListener('click', () => {\r\n                const empid = button.id;\r\n                this.EditEmployeeDetails(empid); // call the editEmployee function with id as argument\r\n            });\r\n        });\r\n    }\r\n    Filters() {\r\n        document.querySelectorAll('.table-filters-list button').forEach((button) => {\r\n            button.addEventListener('click', (event) => {\r\n                console.log(\"Filters event listeners adding\");\r\n                const letter = button.textContent;\r\n                const index = this.selectedLetters.indexOf(letter);\r\n                if (index !== -1) {\r\n                    this.selectedLetters.splice(index, 1);\r\n                    button.classList.remove('filteractive');\r\n                }\r\n                else {\r\n                    this.selectedLetters.push(letter);\r\n                    button.classList.add('filteractive');\r\n                }\r\n                this.filterTableByFirstLetters(this.selectedLetters);\r\n                console.log(this.selectedLetters);\r\n                const filtericon = document.getElementById('table-filters-icon');\r\n                if (this.selectedLetters.length == 0) {\r\n                    filtericon.style.filter = \"\";\r\n                }\r\n                else {\r\n                    filtericon.style.filter = \"invert(18%) sepia(98%) saturate(7171%) hue-rotate(359deg) brightness(101%) contrast(114%)\";\r\n                }\r\n            });\r\n        });\r\n    }\r\n    resetFilters() {\r\n        const statusSelect = document.getElementById('filter-Status');\r\n        const locationSelect = document.getElementById('filter-Location');\r\n        const departmentSelect = document.getElementById('filter-Department');\r\n        statusSelect.selectedIndex = 0;\r\n        locationSelect.selectedIndex = 0;\r\n        departmentSelect.selectedIndex = 0;\r\n        if (statusSelect.value == \"\" && locationSelect.value == \"\" && departmentSelect.value == \"\") {\r\n            const filterinactive = document.getElementById('filters-reset-apply-buttons');\r\n            filterinactive.style.display = \"none\";\r\n        }\r\n    }\r\n    filterTableByFirstLettersReset() {\r\n        this.selectedLetters = [];\r\n        this.filterTableByFirstLetters(this.selectedLetters);\r\n        const buttons = document.querySelectorAll('.table-filters-list button');\r\n        buttons.forEach((button) => {\r\n            button.classList.remove('filteractive');\r\n        });\r\n        const filtericon = document.getElementById('table-filters-icon');\r\n        filtericon.style.filter = \"\";\r\n        this.resetFilters();\r\n    }\r\n    filterTableByFirstLetters(letters) {\r\n        const localdata = JSON.parse(localStorage.getItem(\"data\") || \"{}\");\r\n        const employees = localdata.Employees;\r\n        let emp_filter_sort_data; // Declare the variable here\r\n        if (letters.length > 0 && employees.length > 0) {\r\n            emp_filter_sort_data = employees.filter((employee) => {\r\n                const firstLetter = employee.firstname.trim().charAt(0).toUpperCase();\r\n                return letters.indexOf(firstLetter) !== -1; // Fix: Use indexOf instead of includes\r\n            });\r\n        }\r\n        else {\r\n            emp_filter_sort_data = employees;\r\n        }\r\n        this.loaddataobj.LoadEmployeeDataByArray(emp_filter_sort_data);\r\n        this.resetFilters();\r\n    }\r\n    checkboxes() {\r\n        var _a;\r\n        (_a = document.getElementById('table-header-checkbox')) === null || _a === void 0 ? void 0 : _a.addEventListener('change', () => {\r\n            var _a;\r\n            const checkboxes = document.querySelectorAll('#employees-table tbody tr input[type=\"checkbox\"]');\r\n            checkboxes.forEach((checkbox) => {\r\n                var _a;\r\n                checkbox.checked = (_a = document.getElementById('table-header-checkbox')) === null || _a === void 0 ? void 0 : _a.checked;\r\n            });\r\n            if ((_a = document.getElementById('table-header-checkbox')) === null || _a === void 0 ? void 0 : _a.checked) {\r\n                const del = document.getElementById('emp-table-delete');\r\n                del.classList.remove('lightred-red-button');\r\n                del.classList.add('red-white-button');\r\n            }\r\n            else {\r\n                const del = document.getElementById('emp-table-delete');\r\n                del.classList.add('lightred-red-button');\r\n                del.classList.remove('red-white-button');\r\n            }\r\n        });\r\n    }\r\n    checkboxIsChecked() {\r\n        const checkboxes = document.querySelectorAll('#employees-table tbody tr input[type=\"checkbox\"]');\r\n        checkboxes.forEach((checkbox) => {\r\n            checkbox.addEventListener('change', () => {\r\n                const parentCheckbox = document.getElementById('table-header-checkbox');\r\n                const checkboxes = document.querySelectorAll('#employees-table tbody tr input[type=\"checkbox\"]');\r\n                const allChecked = Array.from(checkboxes).every((checkbox) => checkbox.checked);\r\n                parentCheckbox.checked = allChecked;\r\n                if (Array.from(checkboxes).some((checkbox) => checkbox.checked)) {\r\n                    const del = document.getElementById('emp-table-delete');\r\n                    del.classList.remove('lightred-red-button');\r\n                    del.classList.add('red-white-button');\r\n                }\r\n                else {\r\n                    const del = document.getElementById('emp-table-delete');\r\n                    del.classList.add('lightred-red-button');\r\n                    del.classList.remove('red-white-button');\r\n                }\r\n            });\r\n        });\r\n    }\r\n    filterEmployeesTable() {\r\n        const statusSelect = document.getElementById('filter-Status').value;\r\n        const locationSelect = document.getElementById('filter-Location').value;\r\n        const departmentSelect = document.getElementById('filter-Department').value;\r\n        if (statusSelect === \"\" && locationSelect === \"\" && departmentSelect === \"\") {\r\n            const rows = document.querySelectorAll('#employees-table tbody tr');\r\n            rows.forEach((row) => {\r\n                row.style.display = '';\r\n            });\r\n        }\r\n        else {\r\n            const rows = document.querySelectorAll('#employees-table tbody tr');\r\n            rows.forEach((row) => {\r\n                const statusCell = row.querySelector('td:nth-child(7)');\r\n                const locationCell = row.querySelector('td:nth-child(3)');\r\n                const departmentCell = row.querySelector('td:nth-child(4)');\r\n                if ((statusSelect !== \"\" && statusCell.textContent !== statusSelect) ||\r\n                    (locationSelect !== \"\" && locationCell.textContent !== locationSelect) ||\r\n                    (departmentSelect !== \"\" && departmentCell.textContent !== departmentSelect)) {\r\n                    row.style.display = 'none';\r\n                }\r\n                else {\r\n                    row.style.display = '';\r\n                }\r\n            });\r\n        }\r\n    }\r\n    populateFilterOptions(selector, filterId) {\r\n        const cells = document.querySelectorAll(selector);\r\n        const options = document.getElementById(filterId);\r\n        let values = Array.from(cells).map((cell) => cell.textContent);\r\n        values = [...new Set(values)];\r\n        values.forEach((value) => {\r\n            const option = document.createElement('option');\r\n            option.value = value;\r\n            option.textContent = value;\r\n            options.appendChild(option);\r\n        });\r\n    }\r\n    checkFilterStatus() {\r\n        const statusSelect = document.getElementById('filter-Status');\r\n        const locationSelect = document.getElementById('filter-Location');\r\n        const departmentSelect = document.getElementById('filter-Department');\r\n        const filterButtons = document.getElementById('filters-reset-apply-buttons');\r\n        filterButtons.style.display = (statusSelect.value || locationSelect.value || departmentSelect.value) ? \"\" : \"none\";\r\n    }\r\n    LoadFilterOptions() {\r\n        this.populateFilterOptions('#employees-table tbody tr td:nth-child(3)', 'filter-Location');\r\n        this.populateFilterOptions('#employees-table tbody tr td:nth-child(4)', 'filter-Department');\r\n        this.populateFilterOptions('#employees-table tbody tr td:nth-child(7)', 'filter-Status');\r\n        ['filter-Status', 'filter-Location', 'filter-Department'].forEach((filterId) => {\r\n            const filterElement = document.getElementById(filterId);\r\n            if (filterElement) {\r\n                filterElement.addEventListener('change', this.checkFilterStatus);\r\n            }\r\n        });\r\n        this.checkFilterStatus();\r\n    }\r\n    sortBy(c) {\r\n        var _a;\r\n        const table = document.getElementById(\"employees-table\");\r\n        const rows = table.rows.length;\r\n        const columns = table.rows[0].cells.length;\r\n        const arrTable = [];\r\n        console.log(c);\r\n        for (let ro = 0; ro < rows; ro++) {\r\n            const row = table.rows[ro];\r\n            if (row.style.display !== 'none') {\r\n                const arrRow = [];\r\n                for (let co = 0; co < columns; co++) {\r\n                    arrRow[co] = row.cells[co].innerHTML;\r\n                }\r\n                arrTable.push(arrRow);\r\n            }\r\n        }\r\n        const th = arrTable.shift();\r\n        if (this.cPrev === c) {\r\n            arrTable.reverse();\r\n        }\r\n        else {\r\n            arrTable.sort((a, b) => {\r\n                const valueA = a[c];\r\n                const valueB = b[c];\r\n                return valueA.localeCompare(valueB);\r\n            });\r\n        }\r\n        this.cPrev = c;\r\n        arrTable.unshift(th);\r\n        for (let ro = 0; ro < rows; ro++) {\r\n            for (let co = 0; co < columns; co++) {\r\n                const table = document.getElementById(\"employees-table\");\r\n                if (table) {\r\n                    const cell = (_a = table.rows[ro]) === null || _a === void 0 ? void 0 : _a.cells[co];\r\n                    if (cell) {\r\n                        cell.innerHTML = arrTable[ro][co];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.EmployeeTableEventlisteners();\r\n    }\r\n    deleteEmployees() {\r\n        try {\r\n            const checkboxes = document.querySelectorAll('#employees-table tbody tr input[type=\"checkbox\"]');\r\n            const data = JSON.parse(localStorage.getItem(\"data\") || \"{}\");\r\n            if (!data || !data.Employees) {\r\n                console.error(\"No employee data found in local storage.\");\r\n                return;\r\n            }\r\n            let employees = data.Employees;\r\n            const isEmployeeSelected = Array.from(checkboxes).some((checkbox) => checkbox.checked);\r\n            if (!isEmployeeSelected) {\r\n                console.error(\"No employee selected for deletion.\");\r\n                return;\r\n            }\r\n            const confirmation = confirm(\"Are you sure you want to delete the selected employees?\");\r\n            if (!confirmation) {\r\n                return;\r\n            }\r\n            checkboxes.forEach((checkbox) => {\r\n                if (checkbox.checked) {\r\n                    employees = employees.filter((employee) => employee.empid !== checkbox.id);\r\n                    console.log(\"employee: \", employees);\r\n                }\r\n            });\r\n            data.Employees = employees;\r\n            localStorage.setItem(\"data\", JSON.stringify(data));\r\n            this.EmployeeMenu();\r\n            this.alertobj.CustomAlert(\"success\", \"Selected employees deleted successfully.\");\r\n        }\r\n        catch (error) {\r\n            console.error(\"An error occurred while deleting employees: \", error);\r\n        }\r\n    }\r\n    deleteEmployee(empid) {\r\n        try {\r\n            const confirmation = confirm(\"Are you sure you want to delete this ( \" + empid + \" ) employee?\");\r\n            if (!confirmation) {\r\n                return;\r\n            }\r\n            const data = JSON.parse(localStorage.getItem(\"data\") || \"{}\");\r\n            if (!data || !data.Employees) {\r\n                this.alertobj.CustomAlert(\"error\", \"No employee data found in local storage.\");\r\n                return;\r\n            }\r\n            let employees = data.Employees;\r\n            employees = employees.filter((employee) => employee.empid !== empid);\r\n            data.Employees = employees;\r\n            localStorage.setItem(\"data\", JSON.stringify(data));\r\n            this.EmployeeMenu();\r\n            this.alertobj.CustomAlert(\"success\", \"Selected employee deleted successfully.\");\r\n        }\r\n        catch (error) {\r\n            this.alertobj.CustomAlert(\"error\", \"An error occurred while deleting employees: \" + error);\r\n        }\r\n    }\r\n    viewmore(empid) {\r\n        const divs = document.querySelectorAll(\".emp-table-more\");\r\n        empid = empid + \"_div\";\r\n        divs.forEach((div) => {\r\n            if (div.id !== empid) {\r\n                div.style.display = \"none\";\r\n            }\r\n        });\r\n        const divMore = document.querySelector(\"#\" + empid);\r\n        if (divMore.style.display == \"none\") {\r\n            divMore.style.display = \"flex\";\r\n        }\r\n        else {\r\n            divMore.style.display = \"none\";\r\n        }\r\n    }\r\n    EditEmployeeDetails(empid) {\r\n        const data = JSON.parse(localStorage.getItem(\"data\") || \"{}\");\r\n        if (!data || !data.Employees) {\r\n            this.alertobj.CustomAlert(\"error\", \"No employee data found in local storage.\");\r\n            return;\r\n        }\r\n        const employee = data.Employees.find((emp) => emp.empid === empid);\r\n        const mainContainer = document.querySelector(\".main-content\");\r\n        fetch(\"HTML/AddEmployee.html\")\r\n            .then((res) => res.text())\r\n            .then((data) => {\r\n            mainContainer.innerHTML = data;\r\n        })\r\n            .then(() => {\r\n            const employeeMenu = document.querySelector(\"#employee-menu\");\r\n            employeeMenu.classList.add(\"menuactive\");\r\n            const rolesMenu = document.querySelector(\"#roles-menu\");\r\n            rolesMenu.classList.remove(\"menuactive\");\r\n        })\r\n            .then(() => {\r\n            this.addemployeeobj.addemployeeFormSubmitValidation();\r\n        })\r\n            .then(() => {\r\n            const addEmployeeTitle = document.getElementById(\"add-employee-title\");\r\n            const formSubmit = document.getElementById('form-submit');\r\n            const addOrEditEmployeeFlag = document.getElementById('add-or-edit-employee-flag');\r\n            const empid = document.getElementById('empid');\r\n            const firstname = document.getElementById('firstname');\r\n            const lastname = document.getElementById('lastname');\r\n            const dob = document.getElementById('dob');\r\n            const email = document.getElementById('email');\r\n            const mobile = document.getElementById('mobile');\r\n            const joiningdate = document.getElementById('joiningdate');\r\n            const location = document.getElementById('location');\r\n            const assignmanager = document.getElementById('assignmanager');\r\n            const assignproject = document.getElementById('assignproject');\r\n            const department = document.getElementById('department');\r\n            const jobtitle = document.getElementById('jobtitle');\r\n            const uploadedImgPreview = document.getElementById('uploaded-img-preview');\r\n            if (addEmployeeTitle) {\r\n                addEmployeeTitle.innerText = \"Edit Employee\";\r\n            }\r\n            if (formSubmit) {\r\n                formSubmit.innerText = \"Update Employee\";\r\n            }\r\n            if (addOrEditEmployeeFlag) {\r\n                addOrEditEmployeeFlag.value = \"edit\";\r\n            }\r\n            if (empid) {\r\n                empid.value = employee.empid;\r\n                empid.setAttribute('readonly', 'readonly');\r\n            }\r\n            if (firstname) {\r\n                firstname.value = employee.firstname;\r\n            }\r\n            if (lastname) {\r\n                lastname.value = employee.lastname;\r\n            }\r\n            if (dob) {\r\n                dob.value = employee.DOB;\r\n            }\r\n            if (email) {\r\n                email.value = employee.emailid;\r\n            }\r\n            if (mobile) {\r\n                mobile.value = employee.mobile;\r\n            }\r\n            if (joiningdate) {\r\n                joiningdate.value = employee.joining;\r\n            }\r\n            if (location) {\r\n                location.value = employee.location;\r\n            }\r\n            if (assignmanager) {\r\n                assignmanager.value = employee.AssignManager;\r\n            }\r\n            if (assignproject) {\r\n                assignproject.value = employee.AssignProject;\r\n            }\r\n            if (department) {\r\n                department.value = employee.Department;\r\n            }\r\n            if (jobtitle) {\r\n                jobtitle.value = employee.jobtitle;\r\n            }\r\n            if (uploadedImgPreview) {\r\n                uploadedImgPreview.src = employee.profilepath;\r\n            }\r\n        })\r\n            .catch((error) => console.error('Error:', error));\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://bundling-ts-files/./TypeScript/employee.ts?");

/***/ }),

/***/ "./TypeScript/index.ts":
/*!*****************************!*\
  !*** ./TypeScript/index.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CustomAlertclass: () => (/* binding */ CustomAlertclass),\n/* harmony export */   defualtpageclass: () => (/* binding */ defualtpageclass),\n/* harmony export */   indexclass: () => (/* binding */ indexclass)\n/* harmony export */ });\n/* harmony import */ var _data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data */ \"./TypeScript/data.ts\");\n/* harmony import */ var _employee__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./employee */ \"./TypeScript/employee.ts\");\n/* harmony import */ var _addemployee__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./addemployee */ \"./TypeScript/addemployee.ts\");\n\r\n\r\n\r\nclass indexclass {\r\n    constructor() {\r\n        this.addemployeeclassobj = new _addemployee__WEBPACK_IMPORTED_MODULE_2__.addEmployeeEventListenersClass();\r\n        this.employeeclassobj = new _employee__WEBPACK_IMPORTED_MODULE_1__.employeeclass();\r\n        this.dataobj = new _data__WEBPACK_IMPORTED_MODULE_0__.Loaddataclass();\r\n    }\r\n    // sidebar toggle \r\n    toggleSidebar() {\r\n        const sidebar = document.querySelector(\".sidebar\");\r\n        const mainContainer = document.querySelector(\".main-container\");\r\n        const closedSidebarElements = document.querySelectorAll(\".closed-sidebar\");\r\n        const min_logo = document.querySelector(\".sidebar-closed-logo\");\r\n        sidebar === null || sidebar === void 0 ? void 0 : sidebar.classList.toggle(\"toggleopen\");\r\n        mainContainer === null || mainContainer === void 0 ? void 0 : mainContainer.classList.toggle(\"sidebar-open\");\r\n        // If the sidebar is open\r\n        if (sidebar === null || sidebar === void 0 ? void 0 : sidebar.classList.contains(\"toggleopen\")) {\r\n            // Remove the 'closed-sidebar-active' class from each 'closed-sidebar' element\r\n            closedSidebarElements.forEach(element => {\r\n                element.classList.remove(\"closed-sidebar-active\");\r\n            });\r\n            if (min_logo) {\r\n                min_logo.style.display = \"none\";\r\n            }\r\n        }\r\n        else {\r\n            // If the sidebar is closed, add the 'closed-sidebar-active' class to each 'closed-sidebar' element\r\n            closedSidebarElements.forEach(element => {\r\n                element.classList.add(\"closed-sidebar-active\");\r\n            });\r\n            if (min_logo) {\r\n                min_logo.style.display = \"block\";\r\n            }\r\n        }\r\n    }\r\n    // including sidebar html code\r\n    NavbarLoad() {\r\n        const sidebarcontainer = document.querySelector(\".sidebar-container\");\r\n        fetch(\"Components/sidebar.html\")\r\n            .then((res) => res.text())\r\n            .then((data) => {\r\n            if (sidebarcontainer) {\r\n                sidebarcontainer.innerHTML = data;\r\n            }\r\n        })\r\n            .catch((error) => console.error('Error:', error));\r\n        // including searchbar html code\r\n        const searchbar = document.querySelector(\".searchbar-container\");\r\n        fetch(\"Components/searchbar.html\")\r\n            .then((res) => res.text())\r\n            .then((data) => {\r\n            if (searchbar) {\r\n                searchbar.innerHTML = data;\r\n            }\r\n        })\r\n            .catch((error) => console.error('Error:', error));\r\n    }\r\n    //roles menu page\r\n    RolesMenu() {\r\n        const mainContainer = document.querySelector(\".main-content\");\r\n        fetch(\"Components/roles.html\")\r\n            .then((res) => res.text())\r\n            .then((data) => {\r\n            if (mainContainer) {\r\n                mainContainer.innerHTML = data;\r\n            }\r\n        })\r\n            .then(() => {\r\n            const rolesMenu = document.querySelector(\"#roles-menu\");\r\n            rolesMenu === null || rolesMenu === void 0 ? void 0 : rolesMenu.classList.add(\"menuactive\");\r\n            // remove active class from other menu\r\n            const employeeMenu = document.querySelector(\"#employee-menu\");\r\n            employeeMenu === null || employeeMenu === void 0 ? void 0 : employeeMenu.classList.remove(\"menuactive\");\r\n        })\r\n            .catch((error) => console.error('Error:', error));\r\n    }\r\n    // role details page\r\n    RoleDetails() {\r\n        const mainContainer = document.querySelector(\".main-content\");\r\n        fetch(\"Components/roledetails.html\")\r\n            .then((res) => res.text())\r\n            .then((data) => {\r\n            if (mainContainer) {\r\n                mainContainer.innerHTML = data;\r\n            }\r\n        })\r\n            .then(() => {\r\n            const employeeMenu = document.querySelector(\"#employee-menu\");\r\n            employeeMenu === null || employeeMenu === void 0 ? void 0 : employeeMenu.classList.remove(\"menuactive\");\r\n            // remove active class from other menu\r\n            const rolesMenu = document.querySelector(\"#roles-menu\");\r\n            rolesMenu === null || rolesMenu === void 0 ? void 0 : rolesMenu.classList.add(\"menuactive\");\r\n        })\r\n            .catch((error) => console.error('Error:', error));\r\n    }\r\n    // Add employee page\r\n    addemployeepage() {\r\n        const mainContainer = document.querySelector(\".main-content\");\r\n        fetch(\"Components/AddEmployee.html\")\r\n            .then((res) => res.text())\r\n            .then((data) => {\r\n            if (mainContainer) {\r\n                mainContainer.innerHTML = data;\r\n            }\r\n        })\r\n            .then(() => {\r\n            const employeeMenu = document.querySelector(\"#employee-menu\");\r\n            employeeMenu === null || employeeMenu === void 0 ? void 0 : employeeMenu.classList.add(\"menuactive\");\r\n            const rolesMenu = document.querySelector(\"#roles-menu\");\r\n            rolesMenu === null || rolesMenu === void 0 ? void 0 : rolesMenu.classList.remove(\"menuactive\");\r\n        })\r\n            .then(() => {\r\n            this.addemployeeclassobj.addEmployeeEventListeners();\r\n            this.addemployeeclassobj.addemployeeFormSubmitValidation();\r\n        })\r\n            .catch((error) => console.error('Error:', error));\r\n    }\r\n    // add role page\r\n    addrolepage() {\r\n        const mainContainer = document.querySelector(\".main-content\");\r\n        fetch(\"Components/AddRole.html\")\r\n            .then((res) => res.text())\r\n            .then((data) => {\r\n            if (mainContainer) {\r\n                mainContainer.innerHTML = data;\r\n            }\r\n        })\r\n            .then(() => {\r\n            const employeeMenu = document.querySelector(\"#employee-menu\");\r\n            employeeMenu === null || employeeMenu === void 0 ? void 0 : employeeMenu.classList.remove(\"menuactive\");\r\n            const rolesMenu = document.querySelector(\"#roles-menu\");\r\n            rolesMenu === null || rolesMenu === void 0 ? void 0 : rolesMenu.classList.add(\"menuactive\");\r\n        })\r\n            .catch((error) => console.error('Error:', error));\r\n    }\r\n}\r\nclass defualtpageclass {\r\n    constructor() {\r\n        this.employeeclassobj = new _employee__WEBPACK_IMPORTED_MODULE_1__.employeeclass();\r\n        this.indexobj = new indexclass();\r\n        // Call the defaultpage function on load\r\n        this.defaultpage();\r\n    }\r\n    // default  employee page load\r\n    defaultpage() {\r\n        this.indexobj.NavbarLoad();\r\n        this.employeeclassobj.EmployeeMenu();\r\n    }\r\n}\r\nclass CustomAlertclass {\r\n    // toaster messages for success, warning, info, and error types\r\n    CustomAlert(status, message) {\r\n        var _a;\r\n        const alertContainer = document.querySelector('.alert-messages');\r\n        const alertDiv = document.createElement('div');\r\n        let countdown = 5; // Set the initial countdown value\r\n        alertDiv.className = 'alert alert-' + status;\r\n        alertDiv.innerText = message + ' \\n ' + countdown + ' seconds.';\r\n        (_a = document.querySelector('.alert-messages')) === null || _a === void 0 ? void 0 : _a.classList.add('show');\r\n        alertContainer === null || alertContainer === void 0 ? void 0 : alertContainer.appendChild(alertDiv);\r\n        // Update the countdown every second\r\n        const countdownInterval = setInterval(() => {\r\n            countdown--;\r\n            if (countdown >= 0) {\r\n                alertDiv.innerText = message + '.\\n' + countdown + ' seconds.';\r\n            }\r\n        }, 1000);\r\n        setTimeout(() => {\r\n            var _a;\r\n            clearInterval(countdownInterval); // Stop the countdown\r\n            alertDiv.remove();\r\n            (_a = document.querySelector('.alert-messages')) === null || _a === void 0 ? void 0 : _a.classList.remove('show');\r\n        }, 5000);\r\n    }\r\n}\r\n// creating object for index class\r\nconst page = new defualtpageclass();\r\n\n\n//# sourceURL=webpack://bundling-ts-files/./TypeScript/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__("./TypeScript/index.ts");
/******/ 	__webpack_require__("./TypeScript/addemployee.ts");
/******/ 	__webpack_require__("./TypeScript/employee.ts");
/******/ 	__webpack_require__("./TypeScript/data.ts");
/******/ 	__webpack_require__("./CSS/index.css");
/******/ 	__webpack_require__("./CSS/addemployee.css");
/******/ 	__webpack_require__("./CSS/employee.css");
/******/ 	__webpack_require__("./CSS/addrole.css");
/******/ 	__webpack_require__("./CSS/roles.css");
/******/ 	__webpack_require__("./CSS/roledetails.css");
/******/ 	var __webpack_exports__ = __webpack_require__("./CSS/sidebar.css");
/******/ 	
/******/ })()
;